<#+
public interface IEntityConfig
{
    string AppName { get;}
    string WebAppName { get;}
    string ModuleName { get;}
    string IEntityRepository { get; }
    string entityRepository { get; }
    string IEntityService { get; }
    string entityService { get; }
    string entityTypeName { get; }
    string EntityTypeName { get; }
	Type EntityType {get;}
    string Title { get; }
    string TableName { get; }
	PropertyInfo KeyPropertyInfo {get;}
    string KeyName { get; }
    string keyName { get; }
	string KeyShortName { get;}
	//string keyShortName { get;}
	Type KeyType {get;}
	string KeyTypeName {get;}
}

public class EntityConfig<T> :IEntityConfig where T:class
{
	
	public string AppName
	{
		get
		{
			return "ERP";
		}
	}

	public string WebAppNameField{private get;set;}
	public string WebAppName
	{
		get
		{
			if(string.IsNullOrEmpty(this.WebAppNameField))
				this.WebAppNameField = this.AppName;
			return this.WebAppNameField;
		}
	}

	public string ModuleNameField{private get;set;}
	public string ModuleName
	{
		get
		{
			if(string.IsNullOrEmpty(this.ModuleNameField))
				this.ModuleNameField = "Module";
			return this.ModuleNameField;
		}
	}


	public string TitleField {get;set;}
	public string Title
	{
		get
		{
			if(string.IsNullOrEmpty(this.TitleField))
			{
				var attribute = this.EntityType.GetCustomAttributes(typeof(ColumnMapAttribute), false).FirstOrDefault();
				if (attribute != null)
				{
					var keyAttribute = attribute as ColumnMapAttribute;
					this.TitleField = keyAttribute.ColumnReamrk;
				}
				else
					this.TitleField = this.EntityTypeName;
			}
			return this.TitleField;
		}
	}


	public string TableNameField {get;set;}
	public string TableName 
	{
		get
		{
			if(string.IsNullOrEmpty(this.TableNameField))
			{
				var attribute = this.EntityType.GetCustomAttributes(typeof(ColumnMapAttribute), false).FirstOrDefault();
				if (attribute != null)
				{
					var keyAttribute = attribute as ColumnMapAttribute;
					this.TableNameField = keyAttribute.ColumnName;
				}
				else
					this.TableNameField = this.EntityTypeName;
			}
			return this.TableNameField;
		}
	}


	public Type EntityType 
	{
		get
		{
			return typeof(T);
		}
	}

	public string EntityTypeName
	{
		get
		{
			return this.EntityType.Name;
		}
	}

	public string entityTypeName
	{
		get
		{
			return this.EntityTypeName.ToLower()[0]+this.EntityTypeName.Substring(1);
		}
	}

	public string IEntityService
	{
		get
		{
			return string.Format("I{0}Service",this.EntityTypeName);
		}
	}

	public string entityService
	{
		get
		{
			return string.Format("{0}{1}Service",this.EntityTypeName.ToLower()[0],this.EntityTypeName.Substring(1));
		}
	}

	public string IEntityRepository
	{
		get
		{
			return string.Format("I{0}Repository",this.EntityTypeName);
		}
	}

	public string entityRepository
	{
		get
		{
			return string.Format("{0}{1}Repository",this.EntityTypeName.ToLower()[0],this.EntityTypeName.Substring(1));
		}
	}

	public Expression<Func<T, string>> KeyPropertyExp {get;set;}
	private PropertyInfo keyPropertyInfo;
	public PropertyInfo KeyPropertyInfo
	{
		get
		{
			if(this.KeyPropertyExp == null)
			{
				var attribute = this.EntityType.GetCustomAttributes(typeof(DataServiceKeyAttribute), false).FirstOrDefault();
				if (attribute != null)
				{
					var keyAttribute = attribute as DataServiceKeyAttribute;
					this.keyPropertyInfo = this.EntityType.GetProperty(keyAttribute.KeyNames[0]);
				}
				else
					this.keyPropertyInfo = this.EntityType.GetProperties()[0];
			}
			else
			{
				var expression = (Expression)this.KeyPropertyExp.Body;
				var member = (MemberExpression)expression;
				var propertyName = member.Member.Name;
				this.keyPropertyInfo = this.EntityType.GetProperty(propertyName);
			}
			if(this.keyPropertyInfo == null)
				throw new ApplicationException("类的DataServiceKey定义不明确");
			return this.keyPropertyInfo;
		}
	}
	
	public string KeyName
	{
		get
		{
			return KeyPropertyInfo.Name;
		}
	}

	public string keyName
	{
		get
		{
			return this.KeyName.ToLower()[0]+this.KeyName.Substring(1);
		}
	}
	
	public string KeyShortNameField{private get;set;}
	public string KeyShortName
	{
		get
		{
			if(string.IsNullOrEmpty(this.KeyShortNameField))
			{
				if(this.KeyName.StartsWith(this.EntityTypeName))
					this.KeyShortNameField = this.KeyName.Substring(this.KeyName.Length);
				else
					this.KeyShortNameField = this.KeyName;
			}
			return this.KeyShortNameField;
		}
	}

	public string keyShortName
	{
		get
		{
			return this.KeyShortName.ToLower()[0]+this.KeyShortName.Substring(1);
		}
	}

	public Type KeyType
	{
		get
		{
			return this.KeyPropertyInfo.PropertyType;
		}
	}

	public string KeyTypeName
	{
		get
		{
			var typeName = this.KeyPropertyInfo.PropertyType.Name;
			if(string.Compare(typeName,"string",true) == 0)
				return typeName.ToLower();
			if(string.Compare(typeName,"int",true) == 0)
				return typeName.ToLower();

			typeName = typeName == "Int32"?"int":typeName;
			typeName = typeName == "String"?"string":typeName;
			return typeName;
		}
	}
}
#>