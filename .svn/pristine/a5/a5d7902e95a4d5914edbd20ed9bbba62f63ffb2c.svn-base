using System;
using System.Collections.Generic;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations;
using COM.Domain;
namespace ERP.Domain
{
	 	//ERP_M001_Product
	   public class ERP_M001_ProductMap:EntityTypeConfiguration<ERP_M001_Product>
	{
           public ERP_M001_ProductMap()
           {
               this.ToTable("ERP_M001_Product");
               this.HasKey(t => t.Id);
               this.Property(t => t.Id).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
               this.Property(t => t.Id).HasColumnName("Id");
               this.Property(t => t.CompCode).HasColumnName("CompCode");
               this.Property(t => t.ItemCode).HasColumnName("ItemCode");
               this.Property(t => t.ItemName).HasColumnName("ItemName");
               this.Property(t => t.Description).HasColumnName("Description");
               this.Property(t => t.ItemType).HasColumnName("ItemType");
               this.Property(t => t.ItemShape).HasColumnName("ItemShape");
               this.Property(t => t.Status).HasColumnName("Status");
               this.Property(t => t.StartDt).HasColumnName("StartDt");
               this.Property(t => t.CorpDrawingNo).HasColumnName("CorpDrawingNo");
               this.Property(t => t.CorpDrawingRevNo).HasColumnName("CorpDrawingRevNo");
               this.Property(t => t.CustDrawingNo).HasColumnName("CustDrawingNo");
               this.Property(t => t.CustDrawingRevNo).HasColumnName("CustDrawingRevNo");
               this.Property(t => t.SpecAlignHole).HasColumnName("SpecAlignHole");
               this.Property(t => t.SpecLeads).HasColumnName("SpecLeads");
               this.Property(t => t.SpecRows).HasColumnName("SpecRows");
               this.Property(t => t.SpecLeadDistance).HasColumnName("SpecLeadDistance");
               this.Property(t => t.SpecWidth).HasColumnName("SpecWidth");
               this.Property(t => t.SpecLength).HasColumnName("SpecLength");
               this.Property(t => t.SpecThickness).HasColumnName("SpecThickness");
               this.Property(t => t.SpecAgThickness).HasColumnName("SpecAgThickness");
               this.Property(t => t.SpecDeep).HasColumnName("SpecDeep");
               this.Property(t => t.SpecLeadWidth).HasColumnName("SpecLeadWidth");
               this.Property(t => t.SpecUnitofSheet).HasColumnName("SpecUnitofSheet");
               this.Property(t => t.PlatType).HasColumnName("PlatType");
               this.Property(t => t.Remarks).HasColumnName("Remarks");
               this.Property(t => t.ModifyDt).HasColumnName("ModifyDt");
               this.Property(t => t.ModifyUser).HasColumnName("ModifyUser");
               this.Property(t => t.CreateDt).HasColumnName("CreateDt");
               this.Property(t => t.CreateUser).HasColumnName("CreateUser");
               this.Property(t => t.ItemPic).HasColumnName("ItemPic");
               this.Property(t => t.Version).HasColumnName("Version").IsRowVersion().HasDatabaseGeneratedOption(DatabaseGeneratedOption.Computed).IsOptional();
           }
	}
}