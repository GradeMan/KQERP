<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="..\EntityConfig.tt.txt"#>
<#@ include file="..\NewEntity.tt.txt"#>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.Services.Client.dll" #>
<#@ assembly name="$(ProjectDir)..\..\Utils\COM.Net\COM.Domain\bin\Debug\COM.Domain.dll" #>
<#@ assembly name="$(ProjectDir)..\ERP.Domain\bin\Debug\ERP.Domain.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Services.Common" #>
<#@ import namespace="COM.Domain" #>
<#@ import namespace="ERP.Domain" #>
<#var c = this.NewEntity();#>
using System;
using System.Linq;
using System.Collections.Generic;
using COM.Data;
using <#=c.AppName#>.Data;
using <#=c.AppName#>.Domain;

namespace <#=c.AppName#>.Service
{
    public interface <#=c.IEntityService#>
	{
		<#=c.EntityTypeName#> Get<#=c.EntityTypeName#>By<#=c.KeyShortName#>(<#=c.KeyTypeName#> <#=c.keyName#>);
        List<<#=c.EntityTypeName#>> Get<#=c.EntityTypeName#>List();
		List<<#=c.EntityTypeName#>> Get<#=c.EntityTypeName#>List(PagingModel pagingModel, DateTime? beginDate, DateTime? endDate);
        void Create<#=c.EntityTypeName#>(<#=c.EntityTypeName#> <#=c.entityTypeName#>);
        void Update<#=c.EntityTypeName#>(<#=c.EntityTypeName#> <#=c.entityTypeName#>);
        void Delete<#=c.EntityTypeName#>(<#=c.KeyTypeName#> <#=c.keyName#>);
	}

	public class <#=c.EntityTypeName#>Service :<#=c.IEntityService#>
	{
		private <#=c.IEntityRepository#> <#=c.entityRepository#>;
		private IRuntimeService runtimeService;
		public <#=c.EntityTypeName#>Service(IRuntimeService runtimeService, <#=c.IEntityRepository#> <#=c.entityRepository#>)
		{
			this.runtimeService = runtimeService;
			this.<#=c.entityRepository#> = <#=c.entityRepository#>;
		}

		public List<<#=c.EntityTypeName#>> Get<#=c.EntityTypeName#>List()
        {
            var q = this.<#=c.entityRepository#>.GetMany(i => true);
            return q.ToList();
        }

        public <#=c.EntityTypeName#> Get<#=c.EntityTypeName#>By<#=c.KeyShortName#>(<#=c.KeyTypeName#> <#=c.keyName#>)
        {
            return this.<#=c.entityRepository#>.GetByID(<#=c.keyName#>);
        }

        public void Create<#=c.EntityTypeName#>(<#=c.EntityTypeName#> <#=c.entityTypeName#>)
        {
			this.<#=c.entityRepository#>.Add(<#=c.entityTypeName#>);
            this.runtimeService.UnitOfWork.Commit();
        }

        public void Delete<#=c.EntityTypeName#>(<#=c.KeyTypeName#> <#=c.keyName#>)
        {
            var exists<#=c.EntityTypeName#> = this.Get<#=c.EntityTypeName#>By<#=c.KeyShortName#>(<#=c.keyName#>);
            this.<#=c.entityRepository#>.Delete(exists<#=c.EntityTypeName#>);
            this.runtimeService.UnitOfWork.Commit();
        }

        public void Update<#=c.EntityTypeName#>(<#=c.EntityTypeName#> <#=c.entityTypeName#>)
        {
            var exists<#=c.EntityTypeName#> = this.Get<#=c.EntityTypeName#>By<#=c.KeyShortName#>(<#=c.entityTypeName#>.<#=c.KeyName#>);
            this.<#=c.entityRepository#>.SetValues(<#=c.entityTypeName#>, exists<#=c.EntityTypeName#>);
            this.runtimeService.UnitOfWork.Commit();
        }

        public List<<#=c.EntityTypeName#>> Get<#=c.EntityTypeName#>List(PagingModel pagingModel, DateTime? beginDate, DateTime? endDate)
        {
            var q = this.<#=c.entityRepository#>.GetMany(i => true);
			
            beginDate = beginDate.Value.Date;
            q = q.Where(p => p.CreateDate >= beginDate);
            if (endDate.HasValue)
            {
                endDate = endDate.Value.Date.AddDays(1);
                q = q.Where(p => p.CreateDate < endDate);
            }

            //if(!string.IsNullOrEmpty(<#=c.KeyName.ToLower()[0]+c.KeyName.Substring(1)#>))
            //	q = q.Where(p=>p.<#=c.KeyName#>.StartsWith(<#=c.KeyName.ToLower()[0]+c.KeyName.Substring(1)#>));

            q = q.OrderByDescending(i => i.CreateDate);
            q = q.Paging(pagingModel);
            return q.ToList();
        }
	}

}



	
/*
以下行增加到 <#=c.AppName#>.Data.Repository\\<#=c.AppName#>DbContextPartical.cs
public DbSet<<#=c.EntityTypeName#>> <#=c.EntityTypeName#>Set { get; set; }
.Add(new <#=c.EntityTypeName#>Map())
*/


/*
以下行增加到 <#=c.AppName#>.Service\\UnityExtension.cs
.Register<<#=c.IEntityRepository#>, <#=c.EntityTypeName#>Repository>()
.Register<<#=c.IEntityService#>, <#=c.EntityTypeName#>Service>()
*/

