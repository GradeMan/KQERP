<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="..\EntityConfig.tt.txt"#>
<#@ include file="..\NewEntity.tt.txt"#>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.Services.Client.dll" #>
<#@ assembly name="$(ProjectDir)..\..\Utils\COM.Net\COM.Domain\bin\Debug\COM.Domain.dll" #>
<#@ assembly name="$(ProjectDir)..\ERP.Domain\bin\Debug\ERP.Domain.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Services.Common" #>
<#@ import namespace="COM.Domain" #>
<#@ import namespace="ERP.Domain" #>
<#var c = this.NewEntity();#>
using System;
using System.Collections.Generic;
using System.Data.Entity.ModelConfiguration;
using System.ComponentModel.DataAnnotations;
using COM.Domain;

namespace <#=c.AppName#>.Domain.Map
{
	public class <#=c.EntityTypeName#>Map : EntityTypeConfiguration<<#=c.EntityTypeName#>>
    {
        public <#=c.EntityTypeName#>Map()
        {
            this.ToTable("<#=c.TableName#>");
            this.HasKey(t => t.<#=c.KeyName#>);
            this.Property(t => t.<#=c.KeyName#>).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);

			<#foreach(var prop in c.EntityType.GetProperties())
			{#><#
				var attribute = prop.GetCustomAttributes(typeof(ColumnMapAttribute), false).FirstOrDefault();
				var colName = attribute == null?prop.Name:((ColumnMapAttribute)attribute).ColumnName;
				#>
this.Property(t => t.<#=prop.Name#>).HasColumnName("<#=colName#>");
			<#}#>
}
    }
}

