<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="..\EntityConfig.tt.txt"#>
<#@ include file="..\NewEntity.tt.txt"#>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Data.Services.Client.dll" #>
<#@ assembly name="$(ProjectDir)..\..\COM.Net\COM.Domain\bin\Debug\COM.Domain.dll" #>
<#@ assembly name="$(ProjectDir)..\ERP.Domain\bin\Debug\ERP.Domain.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Services.Common" #>
<#@ import namespace="COM.Domain" #>
<#@ import namespace="ERP.Domain" #>
<#var c = this.NewEntity();#>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Web;
using System.Web.Mvc;
using COM.Data;
using COM.Web;
using <#=c.AppName#>.Domain;
using <#=c.AppName#>.Service;
using <#=c.WebAppName#>.Web.Service;
using <#=c.WebAppName#>.Web.<#=c.ModuleName#>.Models;

namespace <#=c.WebAppName#>.Web.<#=c.ModuleName#>.Controllers
{
	public class <#=c.EntityTypeName#>Controller : Controller
    {
		private <#=c.IEntityService#> <#=c.entityService#> = Unity.Instance.GetService<<#=c.IEntityService#>>();
        private IRuntime runtime = Unity.Instance.GetService<IRuntime>();

		public ActionResult List(int page = 1)
        {
            var model = new <#=c.EntityTypeName#>ListModel()
            {
                BeginDate = DateTime.Today.AddDays(-30),
                EndDate = DateTime.Today,
                PagingModel = new PagingModel(),
            };

            return this.List(model, page);
        }

        [HttpPost]
        public ActionResult List(<#=c.EntityTypeName#>ListModel model, int page = 1)
        {
            model.PagingModel.PageIndex = page;
            model.<#=c.EntityTypeName#>List = this.<#=c.entityService#>.Get<#=c.EntityTypeName#>List(model.PagingModel,model.BeginDate, model.EndDate);
            return View(model);
        }

		public ActionResult Edit(<#=c.KeyTypeName#> id)
        {
            return RedirectToAction(EnumOperation.Update, new { id = id });
        }

		public ViewResult ReadOnly(<#=c.KeyTypeName#> id)
        {
            var <#=c.entityTypeName#> = this.<#=c.entityService#>.Get<#=c.EntityTypeName#>By<#=c.KeyShortName#>(id);
            return View("Edit", <#=c.entityTypeName#>);
        }

        public ViewResult Update(<#=c.KeyTypeName#> id)
        {
            var <#=c.entityTypeName#> = this.<#=c.entityService#>.Get<#=c.EntityTypeName#>By<#=c.KeyShortName#>(id);
            return View("Edit", <#=c.entityTypeName#>);
        }

        public ActionResult Create()
        {
            var <#=c.entityTypeName#> = new <#=c.EntityTypeName#>()
            {
                <#=c.KeyName#> = Guid.NewGuid().ToString(),
            };

            return View("Edit",<#=c.entityTypeName#>);
        }
		
        [HttpPost]
        public ActionResult Create(<#=c.EntityTypeName#> <#=c.entityTypeName#>)
        {
            if (ModelState.IsValid)
            {
                this.<#=c.entityService#>.Create<#=c.EntityTypeName#>(<#=c.entityTypeName#>);
                return RedirectToAction("List");
            }

            return null;
        }

        [HttpPost]
        public ActionResult Update(<#=c.EntityTypeName#> <#=c.entityTypeName#>)
        {
            if (ModelState.IsValid)
            {
                this.<#=c.entityService#>.Update<#=c.EntityTypeName#>(<#=c.entityTypeName#>);
                return RedirectToAction("List");
            }
            return View("Edit", <#=c.entityTypeName#>);
        }

        [HttpPost]
        public ActionResult Delete(<#=c.KeyTypeName#> id)
        {
            this.<#=c.entityService#>.Delete<#=c.EntityTypeName#>(id);
            return null;
        }

	}
}