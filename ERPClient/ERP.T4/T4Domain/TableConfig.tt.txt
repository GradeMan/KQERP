<#+
public interface ITableConfig
{
    string AppName { get;}
    string ModuleName { get;}
    string ConnectionString { get; }
    string Title { get; }
	string TableName {get;}
    string PrimaryKey { get;set; }
	string EntityTypeName { get;}
}

public class TableConfig : ITableConfig
{
	public string AppName
	{
		get
		{
			return "ERP";
		}
	}

	public string ConnectionString
	{
		get
		{
			return @"Data Source=.;Initial Catalog=MyERP;Persist Security Info=True;User ID=hxsoft;Password=hxerp0909;Pooling=False";
		}
	}

	public string Title{get;set;}
	public string TableName{get;set;}
	public string PrimaryKey { get;set; }

	public string EntityTypeNameField{private get;set;}
	public string EntityTypeName
	{
		get
		{
			if(string.IsNullOrEmpty(this.EntityTypeNameField))
				this.EntityTypeNameField = this.TableName;
			return this.EntityTypeNameField;
		}
	}

	public string ModuleNameField{private get;set;}
	public string ModuleName
	{
		get
		{
			if(string.IsNullOrEmpty(this.ModuleNameField))
				this.ModuleNameField = "Module";
			return this.ModuleNameField;
		}
	}

}
#>



<#+
public class TableInfo
{
	public static DataTable GetSchemaInfo(ITableConfig c)
	{
		using (SqlConnection connection = new SqlConnection(c.ConnectionString))
		{             
			string getSchema = @"SELECT TABLE_NAME AS TableName,    
								ORDINAL_POSITION AS ColumnID ,   
								COLUMN_NAME AS ColumnName ,    
								DATA_TYPE AS DataType ,    
								CASE WHEN IS_NULLABLE = 'NO' THEN 'false' ELSE 'true' END AS IsNullable                      
								FROM INFORMATION_SCHEMA.COLUMNS AS A    
								LEFT JOIN sysobjects AS B ON A.TABLE_NAME = B.name
								WHERE  A.TABLE_NAME = '{0}'";
			connection.Open();
			SqlCommand cmd = connection.CreateCommand();   
			cmd.CommandText = string.Format(getSchema,c.TableName);    
			cmd.CommandType = CommandType.Text;                
			SqlDataAdapter adapter = new SqlDataAdapter(cmd);                
			DataSet ds = new DataSet();                
			adapter.Fill(ds);
			return ds.Tables[0];
		}
	}


	
	public static void SetPrimaryKeyInfo(ITableConfig c)
	{
		using (SqlConnection connection = new SqlConnection(c.ConnectionString))
		{             
			string getSchema = @"SELECT syscolumns.name,systypes.name,syscolumns.isnullable,syscolumns.length 
										FROM syscolumns,systypes,sysobjects,sysindexes,sysindexkeys 
										WHERE syscolumns.xusertype = systypes.xusertype 
										AND syscolumns.id = object_id('{0}') 
										AND sysobjects.xtype = 'PK' 
										AND sysobjects.parent_obj = syscolumns.id 
										AND sysindexes.id = syscolumns.id 
										AND sysobjects.name = sysindexes.name 
										AND sysindexkeys.id = syscolumns.id 
										AND sysindexkeys.indid = sysindexes.indid 
										AND syscolumns.colid = sysindexkeys.colid ";

			connection.Open();            
			SqlCommand cmd = connection.CreateCommand();   
			cmd.CommandText = string.Format(getSchema,c.TableName);    
			cmd.CommandType = CommandType.Text;                
			SqlDataAdapter adapter = new SqlDataAdapter(cmd);                
			DataSet ds = new DataSet();                
			adapter.Fill(ds);
			c.PrimaryKey = ds.Tables[0].Rows[0]["name"].ToString();

		}
	}

	public static string DbType2CshartType(string type,string isNullFlag)
	{
		bool isNull = (string.Compare(isNullFlag,"true",true) == 0);
		if (string.IsNullOrEmpty(type))
			return string.Empty;

		if (string.Equals(type, "int", StringComparison.OrdinalIgnoreCase))
			return "int"+(isNull?"?":string.Empty);

		if (string.Equals(type, "nvarchar", StringComparison.OrdinalIgnoreCase))
			return "string";

		if (string.Equals(type, "char", StringComparison.OrdinalIgnoreCase))
			return "string";

		if (string.Equals(type, "nchar", StringComparison.OrdinalIgnoreCase))
			return "string";

		if (string.Equals(type, "varchar", StringComparison.OrdinalIgnoreCase))
			return "string";

		if (string.Equals(type, "text", StringComparison.OrdinalIgnoreCase))
			return "string";

		if (string.Equals(type, "datetime", StringComparison.OrdinalIgnoreCase))
			return "DateTime"+(isNull?"?":string.Empty);

		if (string.Equals(type, "float", StringComparison.OrdinalIgnoreCase))
			return "double"+(isNull?"?":string.Empty);

		if (string.Equals(type, "numeric", StringComparison.OrdinalIgnoreCase))
			return "decimal"+(isNull?"?":string.Empty);

		if (string.Equals(type, "decimal", StringComparison.OrdinalIgnoreCase))
			return "decimal"+(isNull?"?":string.Empty);

		if (string.Equals(type, "uniqueidentifier", StringComparison.OrdinalIgnoreCase))
			return "Guid"+(isNull?"?":string.Empty);

		return type;
	}

	


}

#>